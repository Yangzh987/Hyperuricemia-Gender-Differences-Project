 ##数据预处理
           #读取 OTUs 丰度表
           otu <- read.delim('otu_table.txt', row.names = 1)
           
           #过滤低丰度 OTUs 类群，它们对分类贡献度低，且影响计算效率
           #例如剔除总丰度低于 0.05% 的值
           otu <- otu[which(rowSums(otu) >= 0.0005), ]
           
           #合并有关于植物生长时间的信息
           plant <- read.delim('plant_age.txt', row.names = 1)
           
           otu <- data.frame(t(otu))
           otu <- otu[rownames(plant), ]
           otu <- cbind(otu, plant)
           
           #为了方便后续评估随机森林模型的性能
           #将总数据集分为训练集（占 70%）和测试集（占 30%）
           set.seed(123)
           train <- sample(nrow(otu), nrow(otu)*0.7)
           otu_train <- otu[train, ]
           otu_test <- otu[-train, ]
           
           ##randomForest 包的随机森林
           library(randomForest)
           
           #随机森林计算（默认生成 500 棵决策树），详情 ?randomForest
           set.seed(123)
           otu_train.forest <- randomForest(plant_age~., data = otu_train, importance = TRUE)
           otu_train.forest
           #使用训练集，查看预测精度
           plant_predict <- predict(otu_train.forest, otu_train)
           
           plot(otu_train$plant_age, plant_predict, main = '训练集',
                xlab = 'Plant age (days)', ylab = 'Predict')
           abline(1, 1)
           
           #使用测试集，评估预测性能
           plant_predict <- predict(otu_train.forest, otu_test)
           
           plot(otu_test$plant_age, plant_predict, main = '测试集',
                xlab = 'Plant age (days)', ylab = 'Predict')
           abline(1, 1)
           ##OTU 的重要性评估
           #查看表示每个预测变量（细菌 OTU）重要性的得分
           #summary(otu_train.forest)
           importance_otu <- otu_train.forest$importance
           head(importance_otu)
           
           #或者使用函数 importance()
           importance_otu <- data.frame(importance(otu_train.forest), check.names = FALSE)
           head(importance_otu)
           
           #作图展示 top30 重要的 OTUs
           varImpPlot(otu_train.forest, n.var = min(30, nrow(otu_train.forest$importance)),
                      main = 'Top 30 - variable importance')
           #可以根据某种重要性的高低排个序，例如根据“IncNodePurity”指标
           importance_otu <- importance_otu[order(importance_otu$IncNodePurity, decreasing = TRUE), ]
           head(importance_otu)
           
           #输出表格
           #write.table(importance_otu, 'importance_otu.txt', sep = '\t', col.names = NA, quote = FALSE)
           ##交叉验证辅助评估选择特定数量的 OTU
           #5 次重复十折交叉验证
           set.seed(123)
           otu_train.cv <- replicate(5, rfcv(otu_train[-ncol(otu_train)], otu_train$plant_age, cv.fold = 10, step = 1.5), simplify = FALSE)
           otu_train.cv
           
           #提取验证结果绘图
           otu_train.cv <- data.frame(sapply(otu_train.cv, '[[', 'error.cv'))
           otu_train.cv$otus <- rownames(otu_train.cv)
           otu_train.cv <- reshape2::melt(otu_train.cv, id = 'otus')
           otu_train.cv$otus <- as.numeric(as.character(otu_train.cv$otus))
           
           otu_train.cv.mean <- aggregate(otu_train.cv$value, by = list(otu_train.cv$otus), FUN = mean)
           head(otu_train.cv.mean, 10)
           
           #拟合线图
           library(ggplot2)
           
           ggplot(otu_train.cv.mean, aes(Group.1, x)) +
             geom_line() +
             theme(panel.grid = element_blank(), panel.background = element_rect(color = 'black', fill = 'transparent')) +
             labs(title = '',x = 'Number of OTUs', y = 'Cross-validation error')
